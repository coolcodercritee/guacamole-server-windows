CMAKE_MINIMUM_REQUIRED(VERSION 3.7)
PROJECT(guacamole)

IF (WIN32)
    ADD_DEFINITIONS(-D_WIN32_WINNT=0x0600)
    ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
    ADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS)
ENDIF ()

SET(CMAKE_USE_RELATIVE_PATHS TRUE)

# Dependencies List
# Name,Version,Type,Arch,Compiler
SET(Guac_DEPENDENCIES
        # "Boost,v1.64.0,Release,x64,MSVC_14.0"
        "Cairo,NO_VERSION,Release,x64,MSVC_ALL_VERSIONS"
        "FreeRDP,v1.1.0,Release,x64,MSVC_14.0"
        "JPEG,v9b,Release,x64,MSVC_ALL_VERSIONS"
        "OpenSSL,v1.0.2l,Release,x64,MSVC_ALL_VERSIONS"
        "PNG,v1.6.35,Release,x64,MSVC_14.0"
        "WebP,v0.6.1,Release,x64,MSVC_ALL_VERSIONS")

FIND_PACKAGE(Boost REQUIRED)

# SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO
#        "/MD /Zi /O2 /Ob0 /Ot /Oi /GT /GL /DNDEBUG")

# SET(CMAKE_CXX_FLAGS_RELEASE
#        "/MD /O2 /Ob0 /Ot /Oi /GT /GL /DNDEBUG")

SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO
       "/MD /Zi /Od /Ob0 /DNDEBUG")

SET(CMAKE_CXX_FLAGS_RELEASE
       "/MD /Od /Ob0 /DNDEBUG")

# Get the parent dir of the cmake to define the dependencies hint
GET_FILENAME_COMPONENT(CMAKE_PARENT_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)
SET(Guac_DEPENDENCIES_HINT
        ${CMAKE_SOURCE_DIR}/dependencies)

# ADD_DEFINITIONS(-DCAIRO_WIN32_STATIC_BUILD)

# Go over the dependencies list and define for each dependency include dir and libs
FOREACH (DEPENDENCY ${Guac_DEPENDENCIES})
    # Split each list to its args
    STRING(REPLACE "," ";" DEPENDENCY_ARGS ${DEPENDENCY})
    LIST(GET DEPENDENCY_ARGS 0 DEPENDENCY_NAME)
    LIST(GET DEPENDENCY_ARGS 1 DEPENDENCY_VERSION)
    LIST(GET DEPENDENCY_ARGS 2 DEPENDENCY_TYPE)
    LIST(GET DEPENDENCY_ARGS 3 DEPENDENCY_ARCH)
    LIST(GET DEPENDENCY_ARGS 4 DEPENDENCY_COMPILER)
    # Try to find the library using the hint
    SET(DEPENDENCY_EXPECTED_LIB_PATH ${Guac_DEPENDENCIES_HINT}/${DEPENDENCY_NAME}/${DEPENDENCY_VERSION}/lib/${DEPENDENCY_TYPE}/${DEPENDENCY_ARCH}/${DEPENDENCY_COMPILER})
    SET(DEPENDENCY_EXPECTED_INCLUDE_PATH ${Guac_DEPENDENCIES_HINT}/${DEPENDENCY_NAME}/${DEPENDENCY_VERSION}/include)
    IF (EXISTS "${DEPENDENCY_EXPECTED_LIB_PATH}" AND
            EXISTS "${DEPENDENCY_EXPECTED_INCLUDE_PATH}")
        SET(${DEPENDENCY_NAME}_INCLUDE_DIRS "${DEPENDENCY_EXPECTED_INCLUDE_PATH}")
        IF (WIN32)
            FILE(GLOB ${DEPENDENCY_NAME}_LIBRARIES "${DEPENDENCY_EXPECTED_LIB_PATH}/*.lib")
            FILE(GLOB ${DEPENDENCY_NAME}_DYNAMIC_LIBRARIES "${DEPENDENCY_EXPECTED_LIB_PATH}/*.dll")
        ELSEIF (UNIX)
            FILE(GLOB ${DEPENDENCY_NAME}_LIBRARIES "${DEPENDENCY_EXPECTED_LIB_PATH}/*.a")
            FILE(GLOB ${DEPENDENCY_NAME}_DYNAMIC_LIBRARIES "${DEPENDENCY_EXPECTED_LIB_PATH}/*.so")
        ENDIF ()
    ELSE ()
        MESSAGE(FATAL " - Could not find ${DEPENDENCY_NAME} - Expected Paths: ${DEPENDENCY_EXPECTED_LIB_PATH} ${DEPENDENCY_EXPECTED_INCLUDE_PATH}")
    ENDIF ()
ENDFOREACH ()

ADD_SUBDIRECTORY(libguac)
ADD_SUBDIRECTORY(common)
ADD_SUBDIRECTORY(protocols)
ADD_SUBDIRECTORY(guacservice)
